{{- if .Values.web.enabled }}
# Web Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "pinpoint.fullname" . }}-web
  labels:
    {{- include "pinpoint.labels" . | nindent 4 }}
    app.kubernetes.io/component: web
spec:
  replicas: {{ .Values.web.replicaCount }}
  selector:
    matchLabels:
      {{- include "pinpoint.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: web
  template:
    metadata:
      labels:
        {{- include "pinpoint.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: web
    spec:
      initContainers:
        - name: wait-for-zookeeper
          image: busybox:1.36
          command: ['sh', '-c', 'until nc -z -w3 {{ include "pinpoint.fullname" . }}-zookeeper 2181; do echo "Web is waiting for Zookeeper..."; sleep 2; done;']

        - name: wait-for-mysql
          image: "{{ .Values.mysql.image.repository }}:{{ .Values.mysql.image.tag }}"
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-mysql"
                  key: mysql-root-password
          command:
            - 'sh'
            - '-c'
            - |
              until mysqladmin ping -h {{ .Release.Name }}-mysql --user=root -p$MYSQL_ROOT_PASSWORD --silent; do
                echo "Web is waiting for MySQL..."
                sleep 2
              done
              echo "Web Pod: MySQL is ready."

        {{- if .Values.hbase.enabled }}
        - name: wait-for-hbase
          image: busybox:1.36
          command: ['sh', '-c', 'until nc -z -w3 {{ include "pinpoint.fullname" . }}-hbase 16010; do echo "Web is waiting for HBase..."; sleep 2; done;']
        {{- end }}

        {{- if .Values.redis.enabled }}
        - name: wait-for-redis
          image: busybox:1.36
          command: ['sh', '-c', 'until nc -z -w3 {{ .Release.Name }}-redis-master 6379; do echo "Web is waiting for Redis..."; sleep 2; done;']
        {{- end }}

        {{- if .Values.global.metric.enabled }}
        # Wait for the Pinot Controller only when metric profile is enabled.
        - name: wait-for-pinot-controller
          image: busybox:1.36
          command: ['sh', '-c', 'until nc -z -w3 {{ .Release.Name }}-pinot-controller 9000; do echo "Web is waiting for Pinot Controller..."; sleep 2; done;']
        {{- end }}

      containers:
        - name: web
          # Dynamically set the image tag based on the metric profile
          {{- $imageTag := .Values.web.image.tag | default .Values.global.pinpointVersion }}
          {{- if .Values.global.metric.enabled }}
            {{- $imageTag = printf "%s-metric" ($imageTag | default .Values.global.pinpointVersion) }}
          {{- end }}
          image: "{{ .Values.web.image.repository }}:{{ $imageTag }}"
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: PINPOINT_ZOOKEEPER_ADDRESS
              value: "{{ include "pinpoint.fullname" . }}-zookeeper"
            - name: CLUSTER_ENABLE
              value: "true"
            # Dynamically set the Spring profile
            - name: SPRING_PROFILES_ACTIVE
              {{- if .Values.global.metric.enabled }}
              value: "{{ .Values.web.config.springProfiles }},metric"
              {{- else }}
              value: {{ .Values.web.config.springProfiles | quote }}
              {{- end }}

            - name: SPRING_DATASOURCE_HIKARI_JDBC_URL
              value: "jdbc:mysql://{{ .Release.Name }}-mysql:3306/{{ .Values.mysql.auth.database }}?characterEncoding=UTF-8&serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true"
            - name: SPRING_DATASOURCE_HIKARI_USERNAME
              value: "{{ .Values.mysql.auth.username }}"
            - name: SPRING_DATASOURCE_HIKARI_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-mysql"
                  key: mysql-password

            # HBase Connection Settings
            {{- if .Values.hbase.enabled }}
            - name: HBASE_HOST
              value: "{{ include "pinpoint.fullname" . }}-hbase"
            - name: HBASE_PORT
              value: "60000"
            - name: HBASE_ZOOKEEPER_QUORUM
              value: "{{ .Release.Name }}-zookeeper"
            {{- end }}

            # Add Pinot JDBC configurations only when metric profile is enabled
            {{- if .Values.global.metric.enabled }}
            - name: SPRING_PINOT_DATASOURCE_PINOT_JDBC_URL
              value: "jdbc:pinot://{{ .Release.Name }}-pinot-controller:9000"
            - name: SPRING_PINOTDATASOURCE_PINOT_JDBCURL
              value: "jdbc:pinot://{{ .Release.Name }}-pinot-controller:9000"
            - name: PINPOINT_PINOT_JDBC_URL
              value: "jdbc:pinot://{{ .Release.Name }}-pinot-controller:9000"
            # Remove empty username and password as Pinot driver doesn't accept empty strings
            {{- else }}
            # Disable Pinot datasource when metrics are disabled
            - name: SPRING_PINOT_DATASOURCE_PINOT_JDBC_URL
              value: ""
            - name: SPRING_PINOTDATASOURCE_PINOT_JDBCURL
              value: ""
            - name: PINPOINT_PINOT_JDBC_URL
              value: ""
            {{- end }}

            {{- if .Values.redis.enabled }}
            - name: SPRING_DATA_REDIS_HOST
              value: "{{ .Release.Name }}-redis-master"
            - name: SPRING_DATA_REDIS_PORT
              value: "6379"
            - name: SPRING_DATA_REDIS_USERNAME
              value: ""
            {{- if .Values.redis.auth.enabled }}
            - name: SPRING_DATA_REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-redis"
                  key: redis-password
            {{- else }}
            - name: SPRING_DATA_REDIS_PASSWORD
              value: ""
            {{- end }}
            {{- end }}

            # Additional Web Configuration (matching Docker Compose)
            - name: WEB_SERVER_PORT
              value: "8080"
            - name: ADMIN_PASSWORD
              value: "admin"
            - name: CONFIG_SENDUSAGE
              value: "true"
            - name: CONFIG_SHOW_APPLICATIONSTAT
              value: "true"
            - name: JDBC_DRIVERCLASSNAME
              value: "com.mysql.cj.jdbc.Driver"
            - name: JDBC_URL
              value: "jdbc:mysql://{{ .Release.Name }}-mysql:3306/{{ .Values.mysql.auth.database }}?characterEncoding=UTF-8&serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true"
            - name: JDBC_USERNAME
              value: "{{ .Values.mysql.auth.username }}"
            - name: JDBC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-mysql"
                  key: mysql-password

            # Metadata Source Configuration
            - name: SPRING_METADATASOURCE_HIKARI_JDBCURL
              value: "jdbc:mysql://{{ .Release.Name }}-mysql:3306/{{ .Values.mysql.auth.database }}?characterEncoding=UTF-8&serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true"
            - name: SPRING_METADATASOURCE_HIKARI_USERNAME
              value: "{{ .Values.mysql.auth.username }}"
            - name: SPRING_METADATASOURCE_HIKARI_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-mysql"
                  key: mysql-password

            # Security Configuration
            - name: PINPOINT_MODULES_WEB_LOGIN
              value: "false"
            - name: WEB_SECURITY_AUTH_USER
              value: ""
            - name: WEB_SECURITY_AUTH_ADMIN
              value: ""
            - name: WEB_SECURITY_AUTH_JWT_SECRETKEY
              value: ""

          resources:
            {{- toYaml .Values.web.resources | nindent 12 }}
---
# Web Application Service
apiVersion: v1
kind: Service
metadata:
  name: {{ include "pinpoint.fullname" . }}-web
  labels:
    {{- include "pinpoint.labels" . | nindent 4 }}
    app.kubernetes.io/component: web
spec:
  type: {{ .Values.web.service.type }}
  ports:
    - port: {{ .Values.web.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    {{- include "pinpoint.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: web
---
{{- if .Values.web.ingress.enabled -}}
# Web Application Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "pinpoint.fullname" . }}-web
  labels:
    {{- include "pinpoint.labels" . | nindent 4 }}
spec:
  rules:
    - host: {{ .Values.web.ingress.host }}
      http:
        paths:
          - path: {{ .Values.web.ingress.path }}
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ include "pinpoint.fullname" . }}-web
                port:
                  name: http
{{- end }}
{{- end }}